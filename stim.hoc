/*
* $Id: stim.hoc,v 1.5 2009/02/24 00:55:27 ted Exp ted $
* Set up stimulation waveform
* 2018/05/20 Modified by Aman Aberra
*/

// default values
DEL = 1  // ms - delay to first phase
DUR = 1 // ms - duration of first phase
AMP = -10  // ÂµA (stim_mode = 1) or V/m (stim_mode = 2) - amplitude of first phase
FREQ= 100 // Hz
MFREQ= 10 // Hz
DEPTH= 1 //

objref stim_amp, stim_time
stim_amp = new Vector()
stim_time = new Vector()

proc ampmodulation_wiki() { local ton, amp, depth, dt, dur, simtime, freq, modfreq
    ton = $1        // Time of onset
    amp = $2        // Amplitude
    depth = $3      // Modulation depth
    dt = $4         // Time step
    dur = $5        // Duration
    simtime = $6    // Total simulation time
    freq = $7       // Frequency of the sinusoidal signal
    modfreq = $8    // Modulation frequency

    objref times, mod, stim, tvec, stimvec
    times = new Vector()  // Time vector
    times.indgen(0, simtime, dt)  // Generate times from 0 to simtime in steps of dt

    // Compute modulation factor
    mod = new Vector(times.size())
    mod.sin(2 * PI * modfreq / 1000 * (times.sub(ton).sub(1 / (4 * modfreq / 1000))))
    mod.mul(depth).add(1)

    // Compute the stimulation signal
    stim = new Vector(times.size())
    stim.copy(times)
    stim.sub(ton).sin(2 * PI * freq / 1000).mul(amp).mul(mod)

    // Apply time gating: zero before ton and after ton + dur
    stim.c(times.lt(ton), 0)         // Set values to 0 where time < ton
    stim.c(times.ge(ton + dur), 0)  // Set values to 0 where time > ton + dur

    // Create playback vectors
    stim_time = new Vector(times.size())
    stim_amp = new Vector(stim.size())
    stim_time.copy(times)
    stim_amp.copy(stim)
}

ATTACHED__ = 0

proc attach_stim() {
// since stim_xtra is GLOBAL, we only need to specify Vector.play()
// for one instance of xtra, i.e. at just one internal node
// of only one section that contains xtra
  forall {  // check each section to find one that has xtra
    if (ATTACHED__ == 0) {  // don't bother if stim is already attached to something
      if (ismembrane("xtra")) {
        stim_amp.play(&stim_xtra, stim_time, 1) // "interpolated" play
        ATTACHED__ = 1
      }
    }
  }
}

objref g1
proc plot_waveform() {
	g1 = new Graph(0)
	g1.size(0,stim_time.size(),-1, $1*2)
	stim_amp.plot(g1,stim_time)
  if ($1 > 0){ // anodic pulse
    g1.view(0,-$1/2,stim_time.x[stim_time.size()-1],$1*2,1081, 547, 300.48, 200.32) 
  }	else { // cathodic pulse
    g1.view(0,$1*3/2,stim_time.x[stim_time.size()-1],-$1*2,1081, 547, 300.48, 200.32) 
  }
}

proc setstim_ampmodl() {
    ton = $1        // Time of onset
    amp = $2        // Amplitude
    depth = $3      // Modulation depth
    dt=dt       // Time step
    dur = $5        // Duration
    simtime = tstop    // Total simulation time
    freq = $7       // Frequency of the sinusoidal signal
    modfreq = $8    // Modulation frequency
  ampmodulation_wiki(ton,amp,depth,dt,dur,simtime,freq,modfreq)
  attach_stim()
  plot_waveform(amp)
  printf("Generated waveform with del = %g ms, dur = %g ms, amp = %g uA or V/m\n",del,dur,amp)		
}

xpanel("Temporal parameters for extracellular stimulation", 0)
  xvalue("Delay (ms)", "DEL", 1, "setstim_ampmodl(DEL,AMP,DEPTH,DT,DUR,SIMTIME,FREQ,MODFREQ)", 0, 1)
  xvalue("Amp (V/m)", "AMP", 1, "setstim_ampmodl(DEL,AMP,DEPTH,DT,DUR,SIMTIME,FREQ,MODFREQ)", 0, 1)
  xvalue("DEPTH - 0 to 1", "DEPTH", 1, "setstim_ampmodl(DEL,AMP,DEPTH,DT,DUR,SIMTIME,FREQ,MODFREQ)", 0, 1)
  xvalue("DUR (ms)", "DUR", 1, "setstim_ampmodl(DEL,AMP,DEPTH,DT,DUR,SIMTIME,FREQ,MODFREQ)", 0, 1)
  xvalue("Carrier Frequency (Hz)", "FREQ", 1, "setstim_ampmodl(DEL,AMP,DEPTH,DT,DUR,SIMTIME,FREQ,MODFREQ)", 0, 1)
  xvalue("Modulation Frequency (ms)", "MODFREQ", 1, "setstim_ampmodl(DEL,AMP,DEPTH,DT,DUR,SIMTIME,FREQ,MODFREQ)", 0, 1)
xpanel(535,652)
xpanel.view()


proc tstop_changed() {
    setup_stimulation()
    print "tstop changed to ", tstop
}
proc setdt() {
    setup_stimulation()
    print "dt changed to ", dt
}